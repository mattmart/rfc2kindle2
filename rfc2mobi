#!/usr/bin/env python3

'''
Usage: rfc2mobi [options] <rfcXXXX|url>
A program to convert RFC or I-D to mobi formatted eBooks.
Options:
  -k ..., --kindlegen=...  The kindlegen program to use. By default, it's "./kindlegen"
  -h, --help
  -f, --file=... The file to read instead of fetching a link

If you want to convert a RFC, just give the RFC name as command line option.
For I-D, specific the link where it can download. 
'''

'''
Created on May 31, 2011
@author: rhuang
@modifier: mmartinez
'''

import urllib2, urllib, sys, os, getopt, io, subprocess
import configuration
import shutil
import argparse
from html import Html


def rfc2mobi(kgen, rfc, lines):
        
    parDir = configuration.get_default_dir()
    directory = parDir + "/"+ rfc
    css_dir = configuration.get_css_dir() 
    images_dir = configuration.get_images_dir()

    if not os.path.exists(directory + "/" + images_dir):
        os.makedirs(directory + "/" +images_dir)
    if not os.path.exists(directory + "/" +css_dir):
        os.makedirs(directory + "/" +css_dir)
    
    html_file = os.path.join(directory, rfc+'.html')

    output = open(html_file, 'w')
    
    html = Html(directory, css_dir, images_dir, rfc, lines, output)
    html.createHTML()
    
    src_css_files = os.listdir(configuration.get_css_src_dir())
    for file_name in src_css_files:
        full_file_name = os.path.join(configuration.get_css_src_dir(), file_name)
        if (os.path.isfile(full_file_name)):
            shutil.copy(full_file_name, directory +"/"+ css_dir)
    
    output.close()

    #using kindlegen binary to create .mobi file
    exitCode = subprocess.call([kgen, html_file, '-o', rfc+'.mobi'])
    
    #1 or 0 means warnings or success
    if exitCode >= 2:
        print "Fatal error while processing %s." %(rfc)
        print "Deleting attempted directory %s." %(directory)
        shutil.rmtree(directory)
    else:  
        print "Successfully converted %s into %s directory." % (rfc, rfc)

def usage():
    '''
    Usage of this program
    '''
    print __doc__

def getlines(doc, link, file):
    '''
    whatever the arguments were, produce an array of files to operate on
    '''
    final_lines = []

    if file is None:
        print ""
        print "link = %s, rfc was = %s" % (link, doc)
        req = urllib2.Request(link)
        req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
        response = urllib2.urlopen(req)
        for line in response:
            final_lines.append(line)
        response.close()
    elif not os.path.exists(file):
        print "Failed to fetch from file, but we were given the option for it! bailing..."
        exit(1)
    else:
        with open(file,'r') as myfile:
            final_lines = myfile.readlines()
    return final_lines
    
if __name__ == '__main__':
    '''
    Should clean up the arguments, get the lines, and kick off the process
    '''
    try:
      opts, args = getopt.getopt(sys.argv[1:], "hk:f:", ["help", "kindlegen=","rfc-file="])
    except getopt.GetoptError:
      usage()
      sys.exit(2)

    file = None
    kgen = configuration.get_kindlegen()
    
    for opt, arg in opts:
      if opt in ("-h", "--help"):
        usage()
        sys.exit()
      elif opt in ("-k", "--kindlegen"):
        kgen=arg
      elif opt in ("-f", "--rfc-file"):
        file=arg
        print "file was " + file

    if len(sys.argv) < 2:
      usage()
      sys.exit()

    if sys.argv[-1].lower().startswith('rfc'):
        doc = sys.argv[-1].lower()
        link = 'http://www.ietf.org/rfc/%s.txt' % (doc)
    else:
        link = sys.argv[-1]
        doc = sys.argv[-1].split('/')[-1]

    #arguments are cleaned up, fetch the actual lines we will process
    lines = getlines(doc,link,file)
    
    par_dir = configuration.get_default_dir()
    
    #the path is ready, the args are clean, lock 'n load
    if len(lines) < 10:
        for line in lines:
            if "was never issued." in line:
                print line
                sys.exit(2)

    rfc2mobi(kgen, doc, lines)
